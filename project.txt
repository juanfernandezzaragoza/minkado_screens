=== FILE STRUCTURE ===

src/app/emprender-viaje/page.js
src/app/globals.css
src/app/layout.js
src/app/mis-movimientos/page.js
src/app/page.js
src/app/pescadores/page.js
src/components/layouts/AppLayout.jsx
src/components/screens/EmprenderViajeScreen.jsx
src/components/screens/HomeScreen.jsx
src/components/screens/MisMovimientosScreen.jsx
src/components/screens/PescadoresDetailScreen.jsx
src/components/ui/ActionButton.jsx
src/components/ui/ActionItem.jsx
src/components/ui/ActionRow.jsx
src/components/ui/Card.jsx
src/components/ui/CaseItem.jsx
src/components/ui/CreateMinkaButton.jsx
src/components/ui/GradientCard.jsx
src/components/ui/Header.jsx
src/components/ui/ListItem.jsx
src/components/ui/MinkaListItem.jsx
src/components/ui/MovementItem.jsx
src/components/ui/SectionTitle.jsx
src/components/ui/ValuationChart.jsx
src/styles/theme.js

=== FILE CONTENTS ===

//src/app/emprender-viaje/page.js

import EmprenderViajeScreen from '@/components/screens/EmprenderViajeScreen';
import AppLayout from '@/components/layouts/AppLayout';

export default function EmprenderViajePage() {
  return (
    <AppLayout showBackButton={true}>
      <EmprenderViajeScreen />
    </AppLayout>
  );
}


//src/app/globals.css

@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #2c2626;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}



//src/app/layout.js

import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}



//src/app/mis-movimientos/page.js

import MisMovimientosScreen from '@/components/screens/MisMovimientosScreen';
import AppLayout from '@/components/layouts/AppLayout';

export default function MisMovimientosPage() {
  return (
    <AppLayout showBackButton={true}>
      <MisMovimientosScreen />
    </AppLayout>
  );
}


//src/app/page.js

import HomeScreen from '@/components/screens/HomeScreen';
import AppLayout from '@/components/layouts/AppLayout';

export default function Home() {
  return (
    <AppLayout>
      <HomeScreen />
    </AppLayout>
  );
}


//src/app/pescadores/page.js

import PescadoresDetailScreen from '@/components/screens/PescadoresDetailScreen';
import AppLayout from '@/components/layouts/AppLayout';

export default function PescadoresPage() {
  return (
    <AppLayout>
      <PescadoresDetailScreen />
    </AppLayout>
  );
}


//src/components/layouts/AppLayout.jsx

import React from 'react';
import Header from '../ui/Header';

export default function AppLayout({ children, showBackButton = false }) {
  return (
    <div className="max-w-md mx-auto bg-gray-50 min-h-screen overflow-auto font-sans text-black">
      <Header showBackButton={showBackButton} />
      <main className="pb-20">
        {children}
      </main>
    </div>
  );
}



//src/components/screens/EmprenderViajeScreen.jsx

"use client";

import React from 'react';
import { Fish, MapPin, ShoppingBag, Baby } from 'lucide-react';
import Card from '@/components/ui/Card';
import SectionTitle from '@/components/ui/SectionTitle';
import ActionRow from '@/components/ui/ActionRow';
import CaseItem from '@/components/ui/CaseItem';
import ValuationChart from '@/components/ui/ValuationChart';

export default function EmprenderViajeScreen() {
  return (
    <>
      {/* Action Description Card */}
      <div className="m-4">
        <Card>
          <div className="p-5">
            <h1 className="text-xl font-bold text-gray-800 mb-3">Emprender viaje</h1>
            <p className="text-gray-700 text-sm leading-relaxed">
              Salir de pesca con barco mediano a mar abierto.
            </p>
          </div>
        </Card>
      </div>

      {/* Applies To Section */}
      <div className="px-4 pb-4">
        <Card>
          <div className="p-4 flex items-center">
            <div className="w-6 h-6 rounded bg-gray-100 flex items-center justify-center mr-3">
              <Fish size={16} className="text-blue-700" />
            </div>
            <span className="text-gray-800 font-medium">Aplica a Pescadores</span>
          </div>
        </Card>
      </div>

      {/* Current Valuation */}
      <div className="px-4 pb-4">
        <Card className="p-4">
          <ValuationChart 
            title="Valoración actual"
            currentValue="+₭12"
            avgValue="+₭10"
            totalImpact="+₭500"
            showValuationInfo={true}
          />
        </Card>
      </div>

      {/* Time-based Valuation */}
      <div className="px-4 pb-4">
        <Card className="p-4">
          <ValuationChart 
            title="Valoración en el tiempo"
            showTimeChart={true}
            showValuationInfo={false}
          />
        </Card>
      </div>

      {/* Recent Cases Section */}
      <SectionTitle 
        title="Últimos casos" 
        actionText="Ver todos" 
        onAction={() => console.log('Ver todos casos')} 
      />

      <div className="px-4 pb-4">
        <Card>
          <CaseItem 
            name="Juan"
            time="11:36"
            date="10/2/2025"
            value="₭300"
            isPositive={true}
          />
          <CaseItem 
            name="Vanna"
            time="10:02"
            date="11/1/2025"
            value="₭200"
            isPositive={true}
          />
          <CaseItem 
            name="Juan"
            time="10:00"
            date="25/02/2023"
            value="₭10"
            isPositive={true}
          />
        </Card>
      </div>

      {/* Details Section */}
      <SectionTitle title="Detalles" />

      <div className="px-4 pb-6">
        <Card>
          <div className="p-5">
            <div className="mb-4">
              <h4 className="font-medium text-gray-800 mb-2">Ubicación</h4>
              <ul className="text-sm text-gray-700 space-y-1 ml-4">
                <li className="flex items-start">
                  <span className="inline-block w-1 h-1 bg-gray-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                  Salir de Puerto Alegro o Río de La Plata.
                </li>
                <li className="flex items-start">
                  <span className="inline-block w-1 h-1 bg-gray-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                  Embarcación pesquera de más de 8 metros.
                </li>
                <li className="flex items-start">
                  <span className="inline-block w-1 h-1 bg-gray-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                  Tripulación de 8 pescadores con experiencia.
                </li>
              </ul>
            </div>
            
            <div>
              <h4 className="font-medium text-gray-800 mb-2">Consideraciones</h4>
              <ul className="text-sm text-gray-700 space-y-1 ml-4">
                <li className="flex items-start">
                  <span className="inline-block w-1 h-1 bg-gray-400 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                  Respetar las zonas de pesca autorizadas.
                </li>
              </ul>
            </div>
          </div>
        </Card>
      </div>
    </>
  );
}


//src/components/screens/HomeScreen.jsx

"use client"; // This is needed for client-side interactivity

import React, { useState } from 'react';
import { useRouter } from 'next/navigation'; // Add this import

import { 
  TrendingUp, 
  FileText, 
  Clock, 
  Search, 
  PlusCircle, 
  ArrowDownCircle, 
  ArrowUpCircle,
  Fish, 
  Megaphone, 
  Gavel,
  Eye,
  EyeOff,
  ArrowUp,
  ArrowRight,
  ArrowDown,
  ArrowLeftRight
} from 'lucide-react';
import Card from '@/components/ui/Card';
import ActionButton from '@/components/ui/ActionButton';
import ActionItem from '@/components/ui/ActionItem';
import SectionTitle from '@/components/ui/SectionTitle';
import ListItem from '@/components/ui/ListItem';
import { theme } from '@/styles/theme';

export default function HomeScreen() {
  const [isBalanceVisible, setIsBalanceVisible] = useState(true);
  const router = useRouter();
  
  const toggleBalanceVisibility = () => {
    setIsBalanceVisible(!isBalanceVisible);
  };

  return (
    <>
      {/* Account Overview Card */}
      <div className="m-4">
        <Card>
          <div className="p-5">
            <div className="flex justify-between items-start mb-4">
              <div className="text-gray-500 text-sm">Cuenta: juan.mk</div>
              <div 
                className="text-sm text-blue-600 cursor-pointer"
                onClick={() => router.push('/mis-movimientos')}
              >
                Ver mis movimientos &gt;
              </div>
            </div>
            
            <div className="flex items-baseline mb-4">
              {isBalanceVisible ? (
                <>
                  <span className="text-3xl font-bold mr-1">₭ 26,950</span>
                  <span className="text-lg text-gray-500 self-start">81</span>
                </>
              ) : (
                <span className="text-3xl font-bold">₭ ••••••</span>
              )}
              <button 
                onClick={toggleBalanceVisibility}
                className="ml-2 text-gray-400 hover:text-gray-600 self-baseline"
              >
                {isBalanceVisible ? <Eye size={20} /> : <EyeOff size={20} />}
              </button>
            </div>
            
            <div className="flex justify-center items-center text-xs">
              <ArrowUpCircle size={14} className="text-green-500 mr-1" />
              <div className="text-green-600 font-medium">₭ 25</div>
              <div className="ml-1 text-gray-500">desde la última vez</div>
            </div>
          </div>
        </Card>
      </div>

      {/* Primary Actions */}
      <div className="grid grid-cols-4 px-4 pb-6 text-center text-xs gap-4">
        <ActionButton 
          icon={<ArrowUp size={24} className="text-green-600" />} 
          label="Depositar"
          bgColor={theme.colors.success.light}
        />
        <ActionButton 
          icon={<ArrowRight size={24} className="text-blue-600" />} 
          label="Transferir"
          bgColor={theme.colors.primary.light}
        />
        <ActionButton 
          icon={<ArrowLeftRight size={24} className="text-purple-600" />} 
          label="Pactar"
          bgColor={theme.colors.secondary.light}
        />
        <ActionButton 
          icon={<ArrowDown size={24} className="text-red-600" />} 
          label="Extraer"
          bgColor={theme.colors.danger.light}
        />
      </div>

      {/* Secondary Actions Cards */}
      <div className="px-4 pb-6">
        <Card className="p-4 mb-4">
          <h3 className="text-sm font-medium text-gray-700 mb-3">Acciones</h3>
          <div className="grid grid-cols-2 gap-4">
            <ActionItem 
              icon={<Megaphone size={20} className="text-gray-700" />}
              label="Reportar acto"
            />
            <ActionItem 
              icon={<Gavel size={20} className="text-gray-700" />}
              label="Validar actos"
            />
            <ActionItem 
              icon={<FileText size={20} className="text-gray-700" />}
              label="Describir acción"
            />
            <ActionItem 
              icon={<Clock size={20} className="text-gray-700" />}
              label="Historial"
            />
          </div>
        </Card>
        
        <Card className="p-4">
          <h3 className="text-sm font-medium text-gray-700 mb-3">Minkas</h3>
          <div className="grid grid-cols-2 gap-4">
            <ActionItem 
              icon={<Search size={20} className="text-gray-700" />}
              label="Buscar Minkas"
            />
            <ActionItem 
              icon={<PlusCircle size={20} className="text-blue-700" />}
              label="Nueva Minka"
              highlight={true}
            />
          </div>
        </Card>
      </div>

      {/* Section Title */}
      <SectionTitle 
        title="MIS MINKAS" 
        actionText="Ver todas" 
        onAction={() => console.log('Ver todas clicked')} 
      />

      {/* Minka List in Card */}
      <div className="px-4 pb-6">
        <Card>
          {/* Argentina - Parent community */}
          <ListItem 
            icon={
              <div className="w-10 h-10 rounded-lg bg-blue-100 flex items-center justify-center overflow-hidden">
                <div className="absolute w-8 h-8 flex flex-col">
                  <div className="flex-1 bg-blue-500"></div>
                  <div className="flex-1 bg-white flex items-center justify-center">
                    <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                  </div>
                  <div className="flex-1 bg-blue-500"></div>
                </div>
              </div>
            }
            title="ARGENTINA"
            subtitle="2,000 miembros"
            value="₭ 36"
            isPositive={false}
            indentLevel={0}
            minkaId="argentina"
          />
          
          {/* Recoleta - Child of Argentina */}
          <ListItem 
            icon={
              <div className="w-10 h-10 rounded-lg bg-yellow-50 flex items-center justify-center text-xl">
                😊
              </div>
            }
            title="RECOLETA"
            subtitle="42 miembros"
            value="₭ 51"
            isPositive={false}
            indentLevel={1}
            minkaId="recoleta"
          />
          
          {/* Pescadores - Child of Argentina */}
          <ListItem 
            icon={
              <div className="w-10 h-10 rounded-lg bg-blue-50 flex items-center justify-center">
                <Fish size={22} className="text-blue-700" />
              </div>
            }
            title="PESCADORES"
            subtitle="85 miembros"
            value="₭ 22"
            isPositive={true}
            indentLevel={1}
            minkaId="pescadores"
          />
          
          {/* Atuneros - Child of Pescadores */}
          <ListItem 
            icon={
              <div className="w-10 h-10 rounded-lg bg-blue-50 flex items-center justify-center">
                <Fish size={20} className="text-blue-600" />
              </div>
            }
            title="Atuneros"
            subtitle="12 miembros"
            value="₭ 100"
            isPositive={true}
            indentLevel={2}
            minkaId="atuneros"
          />
          
          {/* New parent Minka: Causas populares */}
          <ListItem 
            icon={
              <div className="w-10 h-10 rounded-lg bg-purple-100 flex items-center justify-center">
                <span className="text-purple-700 font-bold text-lg">CP</span>
              </div>
            }
            title="CAUSAS POPULARES"
            subtitle="320 miembros"
            value="₭ 75"
            isPositive={false}
            indentLevel={0}
            minkaId="causas-populares"
          />
          
          {/* Ambientalismo - Child of Causas populares */}
          <ListItem 
            icon={
              <div className="w-10 h-10 rounded-lg bg-green-100 flex items-center justify-center text-xl">
                🌱
              </div>
            }
            title="Ambientalismo"
            subtitle="185 miembros"
            value="₭ 40"
            isPositive={false}
            indentLevel={1}
            minkaId="ambientalismo"
          />
          
          {/* Networkismo - Child of Causas populares */}
          <ListItem 
            icon={
              <div className="w-10 h-10 rounded-lg bg-blue-100 flex items-center justify-center text-xl">
                🌐
              </div>
            }
            title="Networkismo"
            subtitle="135 miembros"
            value="₭ 35"
            isPositive={true}
            indentLevel={1}
            minkaId="networkismo"
          />

          {/* Total */}
          <ListItem 
            title="TOTAL"
            value="₭ 6"
            isPositive={true}
            isTotal={true}
          />
        </Card>
      </div>
    </>
  );
}


//src/components/screens/MisMovimientosScreen.jsx

"use client";

import React from 'react';
import { Fish, Car, Globe, User, Factory } from 'lucide-react';
import Card from '@/components/ui/Card';
import MovementItem from '@/components/ui/MovementItem';

export default function MisMovimientosScreen() {
  return (
    <>
      {/* Title */}
      <div className="px-4 py-6">
        <h1 className="text-2xl font-bold text-gray-800">Mis movimientos</h1>
      </div>

      {/* Movements List */}
      <div className="px-4 pb-6">
        <div className="space-y-0">
          {/* Giving due to pooling - LEFT ARROW */}
          <MovementItem 
            transactionText="← 20% a Pescadores"
            amount="30"
            isPositive={false}
            scopeIcon={<Fish size={14} className="text-blue-600" />}
            scopeLabel="Pescadores"
            scopePosition="left"
            percentage="Por vender pescado"
            alignment="left"
            timestamp="10:15"
          />

          {/* Not pooling - no arrow */}
          <MovementItem 
            transactionText="₭30 a Rubén"
            amount="30"
            isPositive={false}
            scopeIcon={<User size={14} className="text-gray-600" />}
            scopeLabel="Particular"
            scopePosition="left"
            percentage="Por poner música fuerte molestando a Juan"
            alignment="right"
            timestamp="09:42"
          />
          
          {/* Receiving due to pooling - RIGHT ARROW */}
          <MovementItem 
            transactionText="→ 70% de Automovilistas"
            amount="500"
            isPositive={true}
            scopeIcon={<Car size={14} className="text-gray-600" />}
            scopeLabel="Automovilistas"
            scopePosition="left"
            percentage="Por reparar mi auto"
            alignment="left"
            timestamp="14:30"
          />
          
          {/* Giving due to pooling - LEFT ARROW */}
          <MovementItem 
            transactionText="← 70% a Germán"
            amount="30"
            isPositive={false}
            scopeIcon={<Car size={14} className="text-gray-600" />}
            scopeLabel="Automovilistas"
            scopePosition="left"
            percentage="Por reparar su auto"
            alignment="right"
            timestamp="11:20"
          />
          
          {/* NEW ITEM - Pymes argentinas */}
          <MovementItem 
            transactionText="₭500 por dar bicicleta a Juan"
            amount="500"
            isPositive={true}
            scopeIcon={<Factory size={14} className="text-purple-600" />}
            scopeLabel="Pymes argentinas"
            scopePosition="left"
            percentage="Aplicable a Pymes argentinas"
            alignment="left"
            timestamp="12:30"
          />
          
          {/* Receiving due to pooling - RIGHT ARROW */}
          <MovementItem 
            transactionText="→ 20% de Roberto"
            amount="50"
            isPositive={true}
            scopeIcon={<Fish size={14} className="text-blue-600" />}
            scopeLabel="Pescadores"
            scopePosition="left"
            percentage="Por su venta de pescado"
            alignment="right"
            timestamp="16:45"
          />
          
          {/* Not pooling - no arrow */}
          <MovementItem 
            transactionText="₭500 por emprender un viaje"
            amount="500"
            isPositive={true}
            scopeIcon={<Fish size={14} className="text-blue-600" />}
            scopeLabel="Pescadores"
            scopePosition="left"
            percentage="Aplicable a pescadores"
            alignment="left"
            timestamp="08:00"
          />
          
          {/* Not pooling - no arrow - FIXED NEGATIVE SIGN */}
          <MovementItem 
            transactionText="-₭20 por pescar trucha bebé"
            amount="20"
            isPositive={false}
            scopeIcon={<Globe size={14} className="text-green-600" />}
            scopeLabel="Global"
            scopePosition="left"
            percentage="Aplicable a todos"
            alignment="left"
            timestamp="13:55"
          />
        </div>
      </div>
    </>
  );
}


//src/components/screens/PescadoresDetailScreen.jsx

"use client";

import React from 'react';
import { 
  Fish, 
  LogOut,
  UserPlus,
  MapPin,
  ShoppingBag,
  Baby,
  Plus,
  Globe
} from 'lucide-react';
import Card from '@/components/ui/Card';
import ActionItem from '@/components/ui/ActionItem';
import SectionTitle from '@/components/ui/SectionTitle';
import ActionRow from '@/components/ui/ActionRow';
import MinkaListItem from '@/components/ui/MinkaListItem';
import CreateMinkaButton from '@/components/ui/CreateMinkaButton';

export default function PescadoresDetailScreen() {
  return (
    <>
      {/* Pescadores Title Card */}
      <div className="m-4">
        <Card>
          <div className="p-5">
            <div className="flex items-center mb-3">
              <div className="w-12 h-12 rounded-lg bg-blue-50 flex items-center justify-center mr-4">
                <Fish size={28} className="text-blue-700" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-800">PESCADORES</h1>
              </div>
            </div>
            <p className="text-gray-700 text-sm leading-relaxed">
              Fomentar la pesca nacional segura y sustentable.
            </p>
          </div>
        </Card>
      </div>

      {/* Participation Section */}
      <div className="px-4 pb-4">
        <Card className="p-4">
          <h3 className="text-sm font-medium text-gray-700 mb-3">Participación</h3>
          <div className="grid grid-cols-2 gap-4">
            <ActionItem 
              icon={<LogOut size={20} className="text-gray-700" />}
              label="Abandonar minka"
            />
            <ActionItem 
              icon={<UserPlus size={20} className="text-blue-700" />}
              label="Invitar miembro"
              highlight={true}
            />
          </div>
        </Card>
      </div>

      {/* Valued Actions Section */}
      <SectionTitle 
        title="Acciones valoradas" 
        actionText="Ver todas" 
        onAction={() => console.log('Ver todas acciones')} 
      />

      <div className="px-4 pb-4">
        <Card>
          <ActionRow 
            icon={<MapPin size={18} className="text-gray-600" />}
            title="Emprender viaje"
            subtitle="Salir de pesca con barco mediano a mar abierto"
            value="+ ₭ 500"
            valueColor="text-green-600"
            actionId="emprender-viaje"
            scopeIcon={<Fish size={14} className="text-blue-600" />}
            scopeLabel="Pescadores"
            miVoto="-0.5₭"
            resultado="-0.7₭"
          />
          <ActionRow 
            icon={<ShoppingBag size={18} className="text-gray-600" />}
            title="Vender pescado"
            subtitle="Comercializar la pesca del día en el mercado local"
            value="⇆ 20%"
            valueColor="text-gray-600"
            actionId="vender-pescado"
            scopeIcon={<Fish size={14} className="text-blue-600" />}
            scopeLabel="Pescadores"
            miVoto="0₭"
            resultado="+0.2₭"
          />
          <ActionRow 
            icon={<Baby size={18} className="text-gray-600" />}
            title="Pescar trucha bebé"
            subtitle="Perjudicar la sustentabilidad del ecosistema marino"
            value="- ₭ 200"
            valueColor="text-red-600"
            actionId="pescar-trucha-bebe"
            scopeIcon={<Globe size={14} className="text-green-600" />}
            scopeLabel="Global"
            miVoto="-0.5₭"
            resultado="-0.7₭"
          />
        </Card>
      </div>

      {/* Sub-Minkas Section */}
      <SectionTitle 
        title="Minkas en Pescadores" 
        actionText="" 
      />

      <div className="px-4 pb-4">
        <Card>
          <MinkaListItem 
            icon={
              <div className="w-10 h-10 rounded-lg bg-blue-50 flex items-center justify-center">
                <Fish size={20} className="text-blue-600" />
              </div>
            }
            title="Atuneros"
            subtitle="12 miembros"
            value="₭ 100"
            isPositive={true}
            isMember={true}
          />
          
          <MinkaListItem 
            icon={
              <div className="w-10 h-10 rounded-lg bg-blue-50 flex items-center justify-center">
                <Fish size={20} className="text-blue-600" />
              </div>
            }
            title="Agua dulce"
            subtitle="50 miembros"
            value="₭ 22"
            isPositive={true}
            isMember={false}
          />
          
          <MinkaListItem 
            icon={
              <div className="w-10 h-10 rounded-lg bg-blue-50 flex items-center justify-center">
                <Fish size={20} className="text-blue-600" />
              </div>
            }
            title="Truchas"
            subtitle="35 miembros"
            value="₭ 12"
            isPositive={false}
            isMember={false}
          />
        </Card>
      </div>

      {/* Create Minka Button */}
      <div className="px-4 pb-6">
        <CreateMinkaButton label="Crear minka en Pescadores" />
      </div>
    </>
  );
}


//src/components/ui/ActionButton.jsx

import React from 'react';

export default function ActionButton({ icon, label, bgColor, textColor }) {
  return (
    <div className="flex flex-col items-center">
      <div className={`h-14 w-14 rounded-full ${bgColor} flex items-center justify-center mb-2 shadow-sm`}>
        {icon}
      </div>
      <span className="font-medium text-xs">{label}</span>
    </div>
  );
}




//src/components/ui/ActionItem.jsx

import React from 'react';

export default function ActionItem({ icon, label, highlight = false }) {
  return (
    <div className="flex items-center p-2 hover:bg-gray-50 rounded-lg">
      <div className={`h-10 w-10 rounded-lg ${highlight ? 'bg-blue-100' : 'bg-gray-100'} flex items-center justify-center mr-3`}>
        {icon}
      </div>
      <span className={`text-sm ${highlight ? 'font-medium text-blue-700' : ''}`}>{label}</span>
    </div>
  );
}


//src/components/ui/ActionRow.jsx

"use client";

import React from 'react';
import { useRouter } from 'next/navigation';

export default function ActionRow({ 
  icon, 
  title, 
  subtitle,
  value, 
  valueColor = "text-gray-600",
  actionId = null,
  scopeIcon,
  scopeLabel,
  miVoto,
  resultado,
  onClick = null
}) {
  const router = useRouter();
  
  const handleClick = () => {
    if (onClick) {
      onClick();
    } else if (actionId) {
      router.push(`/${actionId.toLowerCase()}`);
    }
  };

  const isClickable = actionId || onClick;
  
  return (
    <div 
      className={`p-4 border-b border-gray-100 last:border-b-0 ${isClickable ? 'hover:bg-gray-50 cursor-pointer' : ''}`}
      onClick={handleClick}
    >
      <div className="flex items-start justify-between">
        <div className="flex items-start flex-1 pr-4">
          <div className="w-8 h-8 flex items-center justify-center mr-3 mt-1">
            {icon}
          </div>
          <div className="flex-1 max-w-xs">
            <div className="flex items-center justify-between mb-1">
              <div className="text-gray-800 font-medium">{title}</div>
              <div className="flex items-center ml-2">
                <div className="w-4 h-4 flex items-center justify-center mr-1">
                  {scopeIcon}
                </div>
                <span className="text-xs text-gray-500">{scopeLabel}</span>
              </div>
            </div>
            {subtitle && (
              <div className="text-sm text-gray-600 mt-1">
                {subtitle.length > 45 ? `${subtitle.substring(0, 45)}...` : subtitle}
              </div>
            )}
          </div>
        </div>
        <div className="text-right">
          <div className={`font-medium text-lg ${valueColor}`}>{value}</div>
          <div className="text-xs text-gray-500 mt-1">
            <div>Mi voto: {miVoto}</div>
            <div>Resultado: {resultado}</div>
          </div>
        </div>
      </div>
    </div>
  );
}


//src/components/ui/Card.jsx

import React from 'react';

export default function Card({ children, className = "" }) {
  return (
    <div className={`bg-white rounded-xl shadow-sm ${className}`}>
      {children}
    </div>
  );
}




//src/components/ui/CaseItem.jsx


import React from 'react';

export default function CaseItem({ name, time, date, value, isPositive = true }) {
  const valueColor = isPositive ? 'text-green-600' : 'text-red-600';
  
  return (
    <div className="flex items-center justify-between p-3 border-b border-gray-100 last:border-b-0">
      <div className="flex-1">
        <div className="font-medium text-gray-800">{name}</div>
        <div className="text-xs text-gray-500">{time} {date}</div>
      </div>
      <div className={`font-medium ${valueColor}`}>
        {isPositive ? '+' : '-'}{value}
      </div>
    </div>
  );
}


//src/components/ui/CreateMinkaButton.jsx

import React from 'react';
import { Plus } from 'lucide-react';

export default function CreateMinkaButton({ label, onClick }) {
  return (
    <div 
      className="flex items-center justify-center p-4 bg-white rounded-xl shadow-sm border-2 border-dashed border-gray-300 hover:border-blue-300 cursor-pointer"
      onClick={onClick}
    >
      <Plus size={20} className="text-gray-500 mr-2" />
      <span className="text-gray-600 font-medium">{label}</span>
    </div>
  );
}


//src/components/ui/GradientCard.jsx

import React from 'react';

export default function GradientCard({ children, gradient, className = "" }) {
  return (
    <div className={`rounded-xl shadow-sm overflow-hidden ${gradient} ${className}`}>
      {children}
    </div>
  );
}


//src/components/ui/Header.jsx

"use client";

import React from 'react';
import { Menu, HelpCircle, Bell, ArrowLeft } from 'lucide-react';
import { useRouter } from 'next/navigation';
import { theme } from '@/styles/theme';

export default function Header({ showBackButton = false }) {
  const router = useRouter();

  const handleBackClick = () => {
    router.back();
  };

  return (
    <div className={`${theme.gradients.primary} text-white shadow-md`}>
      <div className="flex justify-between items-center p-4">
        {showBackButton ? (
          <ArrowLeft size={24} onClick={handleBackClick} className="cursor-pointer" />
        ) : (
          <Menu size={24} />
        )}
        <div className="flex items-center">
          <div 
            className="font-bold text-xl cursor-pointer" 
            onClick={() => router.push('/')}
          >
            Minkado
          </div>
        </div>
        <div className="flex items-center">
          <HelpCircle size={20} className="mr-3 opacity-80" />
          <div className="relative">
            <Bell size={20} className="opacity-80" />
            <div className="absolute -top-1 -right-1 bg-red-500 rounded-full w-3 h-3"></div>
          </div>
        </div>
      </div>
    </div>
  );
}


//src/components/ui/ListItem.jsx

import React from 'react';
import { useRouter } from 'next/navigation';

export default function ListItem({ 
  icon, 
  title, 
  subtitle, 
  value, 
  isPositive = false,
  indentLevel = 0,
  isTotal = false,
  minkaId = null, // Add this prop for navigation
  onClick = null // Allow custom click handlers
}) {
  const router = useRouter();
  
  // Calculate padding based on indent level
  const paddingLeft = indentLevel === 0 ? "" : 
                      indentLevel === 1 ? "pl-10" : 
                      indentLevel === 2 ? "pl-16" : "";
  
  const valueColor = isPositive ? 'text-green-500' : 'text-red-500';
  
  const handleClick = () => {
    if (onClick) {
      onClick();
    } else if (minkaId && !isTotal) {
      // Navigate to the minka detail page using the minkaId
      router.push(`/${minkaId.toLowerCase()}`);
    }
  };

  const isClickable = (minkaId && !isTotal) || onClick;
  
  return (
    <div 
      className={`p-4 border-b border-gray-100 flex items-center ${isClickable ? 'hover:bg-gray-50 cursor-pointer' : ''} ${paddingLeft} ${isTotal ? 'bg-gradient-to-r from-blue-50 to-green-50' : ''}`}
      onClick={handleClick}
    >
      {icon && (
        <div className="mr-3">
          {icon}
        </div>
      )}
      <div className="flex-1">
        <div className={`font-medium text-gray-800 ${isTotal ? 'font-bold' : ''}`}>{title}</div>
        {subtitle && <div className="text-xs text-gray-500">{subtitle}</div>}
      </div>
      <div className={`font-medium ${isTotal ? 'font-bold text-green-600' : valueColor}`}>
        {isPositive ? '+ ' : '- '}{value}
      </div>
    </div>
  );
}


//src/components/ui/MinkaListItem.jsx

import React from 'react';

export default function MinkaListItem({ 
  icon, 
  title, 
  subtitle, 
  value, 
  isPositive = false,
  isMember = true
}) {
  const valueColor = isPositive ? 'text-green-500' : 'text-red-500';
  const textOpacity = isMember ? '' : 'opacity-50';
  
  return (
    <div className={`p-4 border-b border-gray-100 flex items-center hover:bg-gray-50 last:border-b-0 ${textOpacity}`}>
      <div className="mr-3">
        {icon}
      </div>
      <div className="flex-1">
        <div className="font-medium text-gray-800">{title}</div>
        <div className="text-xs text-gray-500">{subtitle}</div>
      </div>
      <div className={`font-medium ${valueColor}`}>
        {isPositive ? '+ ' : '- '}{value}
      </div>
    </div>
  );
}


//src/components/ui/MovementItem.jsx

import React from 'react';

export default function MovementItem({ 
  transactionText,
  amount,
  isPositive,
  scopeIcon,
  scopeLabel,
  percentage,
  scopePosition = "right",
  alignment = "right", // "left" or "right" for chat-like positioning
  timestamp
}) {
  const amountColor = isPositive ? 'text-green-600' : 'text-red-600';
  const sign = isPositive ? '+' : '-';
  
  // Different colors based on alignment (like chat messages)
  const bgColor = alignment === "right" ? "bg-blue-50" : "bg-gray-50";
  const containerClass = alignment === "right" ? "ml-8" : "mr-8";
  
  return (
    <div className={`mb-3 ${containerClass}`}>
      <div className={`${bgColor} rounded-xl p-4 shadow-sm`}>
        {/* Community info at top */}
        <div className={`flex ${scopePosition === 'left' ? 'justify-start' : 'justify-end'} mb-2`}>
          {scopeIcon && (
            <div className="flex items-center">
              <div className="w-4 h-4 flex items-center justify-center mr-1">
                {scopeIcon}
              </div>
              <span className="text-xs text-gray-500">{scopeLabel}</span>
            </div>
          )}
        </div>
        
        {/* Main content */}
        <div className="flex items-start justify-between mb-2">
          <div className="flex-1 pr-4">
            <div className="text-gray-800 font-medium mb-1">
              <span className="font-bold">{transactionText}</span>
            </div>
            {percentage && (
              <div className="text-sm text-gray-600 mt-1">
                {percentage}
              </div>
            )}
          </div>
          <div className="text-right">
            <div className={`font-medium text-lg ${amountColor}`}>
              {sign}₭{amount}
            </div>
          </div>
        </div>
        
        {/* Timestamp */}
        <div className="flex justify-end">
          <span className="text-xs text-gray-400">{timestamp}</span>
        </div>
      </div>
    </div>
  );
}


//src/components/ui/SectionTitle.jsx

import React from 'react';
import { theme } from '@/styles/theme';

export default function SectionTitle({ title, actionText, onAction }) {
  return (
    <div className="px-4 py-3 flex items-center justify-between">
      <h2 className="font-bold text-gray-800 text-lg">{title}</h2>
      {actionText && (
        <div 
          className={`text-sm ${theme.colors.primary.text} cursor-pointer`}
          onClick={onAction}
        >
          {actionText}
        </div>
      )}
    </div>
  );
}


//src/components/ui/ValuationChart.jsx

import React from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer } from 'recharts';

export default function ValuationChart({ 
  title, 
  currentValue, 
  avgValue, 
  totalImpact, 
  showTimeChart = false, 
  showValuationInfo = true,
  chartData = null 
}) {
  if (!showTimeChart) {
    // Current valuation chart - 21 hardcoded points, monotonically growing
    const data = [
      { index: 0, value: -5 },
      { index: 1, value: -3 },
      { index: 2, value: -1 },
      { index: 3, value: 1 },
      { index: 4, value: 3 },
      { index: 5, value: 5 },
      { index: 6, value: 7 },
      { index: 7, value: 8 },
      { index: 8, value: 9 },
      { index: 9, value: 10, isMediana: true }, // Median point
      { index: 10, value: 11 },
      { index: 11, value: 12, isYo: true }, // Your valuation point
      { index: 12, value: 13 },
      { index: 13, value: 14 },
      { index: 14, value: 15 },
      { index: 15, value: 17 },
      { index: 16, value: 19 },
      { index: 17, value: 21 },
      { index: 18, value: 22 },
      { index: 19, value: 23 },
      { index: 20, value: 25 }
    ];

    // Custom dot component to highlight specific points
    const CustomDot = (props) => {
      const { cx, cy, payload } = props;
      if (payload.isYo) {
        return (
          <g>
            <circle cx={cx} cy={cy} r={4} fill="#374151" stroke="#374151" strokeWidth={2} />
            <text x={cx} y={cy + 20} fontSize="10" fill="#6b7280" textAnchor="middle">
              Yo
            </text>
          </g>
        );
      }
      if (payload.isMediana) {
        return (
          <g>
            <circle cx={cx} cy={cy} r={4} fill="#374151" stroke="#374151" strokeWidth={2} />
            <text x={cx} y={cy + 20} fontSize="10" fill="#6b7280" textAnchor="middle">
              Mediana
            </text>
          </g>
        );
      }
      return null;
    };

    return (
      <div className="p-4 bg-gray-50 rounded-lg mb-4">
        <h4 className="font-medium text-gray-800 mb-3">{title}</h4>
        
        <div className="h-32 mb-4">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ top: 5, right: 0, left: 0, bottom: 25 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
              <XAxis 
                dataKey="index"
                axisLine={false}
                tickLine={false}
                tick={false}
              />
              <YAxis 
                domain={[-5, 25]}
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 10, fill: '#6b7280' }}
                tickFormatter={(value) => value >= 0 ? `+₭${value}` : `-₭${Math.abs(value)}`}
              />
              <Line 
                type="monotone" 
                dataKey="value" 
                stroke="#374151" 
                strokeWidth={2}
                dot={<CustomDot />}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
        
        {showValuationInfo && (
          <div className="space-y-2 text-sm">
            <div className="grid grid-cols-3 items-center">
              <span className="text-gray-600">Mi valoración:</span>
              <span className="font-medium text-gray-800 text-right">{currentValue}</span>
              <span className="text-blue-600 underline cursor-pointer text-right">Modificar</span>
            </div>
            <div className="grid grid-cols-3 items-center">
              <span className="text-gray-600">Valoración mediana:</span>
              <span className="font-medium text-gray-800 text-right">{avgValue}</span>
              <span></span>
            </div>
            <div className="grid grid-cols-3 items-center">
              <span className="text-gray-600">Impacto total:</span>
              <span className="font-medium text-gray-800 text-right">{totalImpact}</span>
              <span></span>
            </div>
          </div>
        )}
      </div>
    );
  } else {
    // Time-based charts
    const personalData = [
      { year: 2023, value: 10 },
      { year: 2023.2, value: 10.2 },
      { year: 2023.4, value: 10.5 },
      { year: 2023.6, value: 10.8 },
      { year: 2023.8, value: 11.0 },
      { year: 2024, value: 11.3 },
      { year: 2024.2, value: 11.5 },
      { year: 2024.4, value: 11.7 },
      { year: 2024.6, value: 11.8 },
      { year: 2024.8, value: 11.9 },
      { year: 2025, value: 12 }
    ];

    const medianData = [
      { year: 2023, value: 8 },
      { year: 2023.2, value: 8.1 },
      { year: 2023.4, value: 8.3 },
      { year: 2023.6, value: 8.6 },
      { year: 2023.8, value: 8.9 },
      { year: 2024, value: 9.2 },
      { year: 2024.2, value: 9.4 },
      { year: 2024.4, value: 9.6 },
      { year: 2024.6, value: 9.7 },
      { year: 2024.8, value: 9.8 },
      { year: 2025, value: 10 }
    ];

    const impactData = [
      { year: 2023, value: 100 },
      { year: 2023.2, value: 120 },
      { year: 2023.4, value: 145 },
      { year: 2023.6, value: 175 },
      { year: 2023.8, value: 210 },
      { year: 2024, value: 250 },
      { year: 2024.2, value: 295 },
      { year: 2024.4, value: 345 },
      { year: 2024.6, value: 400 },
      { year: 2024.8, value: 450 },
      { year: 2025, value: 500 }
    ];

    // Combine personal and median data for dual-line chart
    const combinedData = personalData.map((item, index) => ({
      year: item.year,
      personal: item.value,
      median: medianData[index]?.value || 0
    }));

    return (
      <div className="p-4 bg-gray-50 rounded-lg mb-4">
        <h4 className="font-medium text-gray-800 mb-3">{title}</h4>
        
        <div className="space-y-4">
          {/* Personal vs Median Chart */}
          <div className="h-24">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={combinedData} margin={{ top: 5, right: 0, left: 0, bottom: 20 }}>
                <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                <XAxis 
                  dataKey="year" 
                  type="number"
                  scale="linear"
                  domain={[2023, 2025]}
                  ticks={[2023, 2025]}
                  axisLine={false}
                  tickLine={false}
                  tick={{ fontSize: 10, fill: '#6b7280' }}
                />
                <YAxis 
                  axisLine={false}
                  tickLine={false}
                  tick={{ fontSize: 10, fill: '#6b7280' }}
                  tickFormatter={(value) => `+₭${value}`}
                />
                <Line 
                  type="monotone" 
                  dataKey="personal" 
                  stroke="#374151" 
                  strokeWidth={2}
                  dot={false}
                  name="Yo"
                />
                <Line 
                  type="monotone" 
                  dataKey="median" 
                  stroke="#6b7280" 
                  strokeWidth={1}
                  dot={false}
                  name="Med"
                />
              </LineChart>
            </ResponsiveContainer>
          </div>

          {/* Impact Chart */}
          <div className="h-24">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={impactData} margin={{ top: 5, right: 0, left: 0, bottom: 20 }}>
                <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                <XAxis 
                  dataKey="year" 
                  type="number"
                  scale="linear"
                  domain={[2023, 2025]}
                  ticks={[2023, 2025]}
                  axisLine={false}
                  tickLine={false}
                  tick={{ fontSize: 10, fill: '#6b7280' }}
                />
                <YAxis 
                  axisLine={false}
                  tickLine={false}
                  tick={{ fontSize: 10, fill: '#6b7280' }}
                  tickFormatter={(value) => `+₭${value}`}
                />
                <Line 
                  type="monotone" 
                  dataKey="value" 
                  stroke="#374151" 
                  strokeWidth={3}
                  dot={false}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
    );
  }
}


//src/styles/theme.js

export const theme = {
  colors: {
    primary: {
      light: 'bg-blue-50',
      default: 'bg-blue-600',
      dark: 'bg-blue-700',
      text: 'text-blue-600',
      textDark: 'text-blue-700',
    },
    secondary: {
      light: 'bg-purple-50',
      default: 'bg-purple-500',
      text: 'text-purple-600',
    },
    success: {
      light: 'bg-green-50',
      text: 'text-green-600',
      textDark: 'text-green-700',
    },
    danger: {
      light: 'bg-red-50',
      text: 'text-red-500',
      textDark: 'text-red-600',
    },
    neutral: {
      light: 'bg-gray-50',
      lighter: 'bg-gray-100',
      text: 'text-gray-500',
      textDark: 'text-gray-700',
      textDarker: 'text-gray-800',
    },
  },
  gradients: {
    primary: 'bg-gradient-to-r from-green-700 to-green-800',
    total: 'bg-gradient-to-r from-blue-50 to-green-50',
  }
};


